
The quvi test suite

Requires:
    * Perl (and prove <http://search.cpan.org/perldoc?prove>)
    * Perl modules (that are not among the 5.12.2 core modules)
        - Test::Deep <http://search.cpan.org/perldoc/Test::Deep>
        - JSON::XS <http://search.cpan.org/perldoc?JSON::XS>

Notes:
    * Running "make check" can be a lengthy process
        - The tests are disabled by default
        - Run configure with --enable-tests to enable them

    * Most of the tests require an Internet connection
        - The required bandwidth varies, e.g.
            - The fetched video pages can be anything from ~5KB to ~100KB
            - The fetched configs and playlists are often much smaller

    * You may run individual tests manually (e.g. outside of "make check"),
      in which case you need to specify the path to the quvi(1) command
      (unless it's found in your $PATH)
        -  Depending on your setup you may also need to specify the
           path to the quvi LUA scripts (see $top_srcdir/share/)
           if the quvi(1) command cannot find them itself (see also
           "Arguments to tests" further below)

    * quvi picks whatever settings you may have have in ~/.quvirc
        - Keep this in mind when you run the tests

    * You can use the script(1) command to log the tests, e.g.:
        % script -c "make check" foo.log

Run: Tests ($top_srcdir/tests/t/*.t)

    % cd $top_srcdir ; mkdir tmp ; cd tmp ;
    % ../configure --enable-tests && make check (or "make test")

    Similar, but without "make check":

    (assuming you have build quvi in $top_srcdir/tmp)
    % cd $top_srcdir/tests
    % prove -l t/ :: -q ../tmp/src/quvi -b ../share

    You can also choose which of the tests to run by specifying them in
    the command line, e.g.:
        % prove -l t/nosupport.t :: -q ../tmp/src/quvi -b ../share

    See also the prove manual. Consider using the script(1) command
    if you need to log the output.

Run: Tests ($top_srcdir/tests/t/d/*.t) -- Note the 'd'

    These tests are *not* run by "make check". You may find these tests
    useful when you are working on a new website script.

    (assuming you have build quvi in $top_srcdir/tmp and the LUA
    scripts reside in $top_srcdir/share/)
    % cd $top_srcdir/tests
    % prove -l t/d/url.t :: -q ../tmp/src/quvi -b ../share \
        -u $test_url

    Or, if you have been following the steps in HowtoWriteWebsiteScript
    ("2.3.2. Working with precompiled binaries"), you could do the
    following:

    % cd foo
    % cp -r $top_srcdir/tests/lib/ .
    % mkdir t ; cp $top_srcdir/tests/t/d/url.t t/
    % prove -l :: -u $test_url

    # Same but check against an quvi produced JSON.
    % quvi -q $test_url > foo.json
    % prove -l :: -u $test_url -j foo.json

    See also the prove manual. Consider using the script(1) command
    if you need to log the output.

Arguments to tests

    (quote from prove manual)
    "It is possible to supply arguments to tests. To do so separate
    them from prove's own arguments with the arisdottle, '::'.
    For example:
        prove -v t/mytest.t :: --url http://example.com

    would run t/mytest.t with the options '--url http://example.com'.
    When running multiple tests they will each receive the same
    arguments."
    (eoq)

    With this in mind, Test::Quvi supports the following args:
        -q,--quvi-path arg      Path to quvi(1) command
        -b,--quvi-basedir arg   Path to dir containing the (quvi) LUA scripts
        -o,--quvi-opts arg      Additional options to quvi(1) command
        -j,--json-file arg      Verify received data against local JSON file
        -i,--ignore arg         Ignore arg in JSON comparison
        -d,--data-root arg      Path to directory containing the (test) data/
        -v,--valgrind-path arg  Path to valgrind(1) command

    Note that the test suite presumes that the quvi(1) command is found in
    the $PATH if --quvi-path is not specified.

    If the quvi(1) command cannot find the LUA scripts from the typical
    search paths, use the --quvi-basedir option to specify the path to
    the directory with lua/ (e.g. $top_srcdir/share/).

    This is generally the recommended way if you have a different version
    of quvi installed onto your system or none at all (e.g. working with
    VPATH builds). Some examples use the QUVI_BASEDIR environment setting
    which is OK, --quvi-basedir just wraps that.

    You can pass additional options to the quvi(1) command with
    the --quvi-opts, e.g.:
        % prove t/foo.t :: -o "-qs"

    The data/ directory contains the current JSON files produced by quvi
    for different tests. These are used to confirm that the returned
    data matches the expected data. See also "Data: JSON" further below.

    When running your own tests (e.g. t/d/url.t), you may use the
    --json-file option to tell it to test against a JSON of your own.
    e.g.:
        prove t/foo.t :: -j foo.json

    Some websites may be inconsistent in providing static and reliable
    information, e.g. content-length for dailymotion videos change
    (by a few bytes) from time to time for a reason still unknown (to
    us). The test suite therefore ignores (see $top_srcdir/tests/data/
    for the path of dailymotion.json) those details -- content-length
    (or length_bytes) in the of dailymotion -- in JSON comparison.

    You can use --ignore if you need to specify any additional details
    that the tests should ignore in JSON verification:
        % prove t/foo.t :: -i content_type
    or
        % prove t/foo.t :: -i content_type,page_title,host

    Use comma (,) to separate each field name that should be ignored.

    The media URL is ignored by default in all JSON comparison as
    many websites generate an unique URL making this kind of simple
    verification process pointless.

    See $top_srcdir/Makefile.am and above for examples.

Data: JSON

    The test suite checks the quvi returned data against the stored JSON
    files found in the $top_srcdir/tests/data/ directory. These files
    serve another purpose which is to withold the data that can be
    reused, e.g. "page_url" and "format_requested" values are typically
    reused to initiate the test.

     $top_srcdir/tests/data/resolve/
        Resolve shortened, redirect etc. For example, shortened.t and
        redirect.t use these JSONs.

     $top_srcdir/tests/data/format/default/
        JSONs produced by either "quvi $test_url" or "quvi $test_url -f
        default". Each website should have at least one of these.

     $top_srcdir/tests/data/format/default/nsfw/
        Data for NSFW scripts. Ignored unless configure is run with the
        --enable-nsfw switch.

     $top_srcdir/tests/data/format/default/ignore/
        Read the README in this directory.

     $top_srcdir/tests/data/format/default/non-http/
        Read the README in this directory.

     $top_srcdir/tests/data/format/other/
        JSONs for those websites that support more than just the
        'default format'. One JSON for each format.

     $top_srcdir/tests/data/format/other/ignore/
        Read the README in this directory.
