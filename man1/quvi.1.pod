=pod

=head1 NAME

quvi - query media tool

=head1 SYNOPSIS

quvi [options] [url|file ...]

=head1 DESCRIPTION

quvi is a command line tool for parsing Adobe Flash media stream URLs. It
supports many websites including YouTube and Dailymotion.

The parsed details are printed to standard output (in JSON), everything else
is printed to standard error.

=head1 MOTIVATION

quvi parses Adobe Flash media stream URLs for third party applications. It
originates from the idea of allowing users to view the videos without having
to install or use Adobe Flash Player. quvi is not an "alternative" but rather
a "workaround" to Adobe Flash Player.

Read also:

  * <http://en.wikipedia.org/wiki/Adobe_Flash#Performance>
  * <http://en.wikipedia.org/wiki/Adobe_Flash#Flash_client_security>
  * <http://en.wikipedia.org/wiki/Adobe_Flash#Alternatives_to_Flash>

=head1 NOTES - PROTOCOL CATEGORIES

As of 0.2.12, quvi supports different "protocol categories". For
historical reasons, it defaults to the HTTP category. This means
that any website scripts that parse and return RTMP/MMS/RTSP media
URLs are not considered unless an appropriate category switch is used.
For example:

  % quvi --support                 # HTTP websites only (default)
  % quvi --support --category-rtmp # RTMP websites only
  % quvi --support -a              # Websites of all categories

With this in mind:

  % quvi RTMP_URL
  error: no support: RTMP_URL
  % quvi -a RTMP_URL # OK

The default behaviour is planned to change to "all" in 0.2.20.

=head1 OPTIONS

Unless an URL is specified in the command line, quvi reads from the stdin
and expects each URL to be separated by a newline. The command line args
may be either URLs or files to be read. As with reading from the stdin,
each URL in the file is expected to be separated by a newline.

=over 4

=item B<-h, --help>

Print help and exit.

=item B<--version>

Print program version and exit.

=item B<--license>

Print license and exit.

=item B<--support>

Print supported hosts and exit. To check if an URL is supported, specify
an URL as an argument to the program. See L</EXAMPLES>.

=item B<--xml>

Print the details in XML (instead of JSON). URLs are escaped (URL encoded,
unlike in JSON). Encoding is always UTF-8 (like in JSON).

=item B<--old>

Print the details in the previously used default output format
(0.2.3 and earlier).

=item B<-q, --quiet>

Turn off all output printed to stderr (excl. any errors). libcurl
will continue to generate messages to stderr if the L</--verbose-libcurl>
switch is used.

This switch has no no effect on the the media details which are
printed to stdout.

=item B<--verbose-libcurl>

Turn on libcurl verbose mode.

=item B<--exec> I<arg>

Invoke I<arg> for each (successfully) parsed media. You can use the following
specifiers in I<arg>:

  %u  Media URL

Note that I<all> occurences of the specifier will be replaced,
and each new value will be quoted ("").

=item B<-r, --no-resolve>

Do not attempt to resolve URL redirections. If used, most of the
shortened URLs will stop working with quvi. Note that this switch
has no effect on website scripts that use the quvi.resolve function.

=item B<-n, --no-verify>

Do not verify media stream URL after parsing it. Normally this serves two
purposes:

  * Check that the URL works
  * Get content-length and content-type

If this switch used, the program will report invalid values for those
details (e.g. 0 content length, empty string for content-type, etc.) but
may save some bandwidth if those details are not needed.

Note that the URL is verified for HTTP only.

=item B<--category-http>

Enable category HTTP website scripts. This is the default category.

=item B<--category-mms>

Enable category MMS website scripts.

=item B<--category-rtsp>

Enable category RTSP website scripts.

=item B<--category-rtmp>

Enable category RTMP website scripts.

=item B<--category-all>

Enable all categories of website scripts.

=item B<-f, --format> I<arg>

Query for I<arg> format. I<arg> can also be C<help>. The resulting
format may be different from the requested one if the LUA script
was unable to parse an URL to the requested format. The scripts are
expected to fallback to the 'default' format if the requested format
could not be parsed and raise an error if that failed as well.

=item B<--agent> I<arg>

Identify quvi as I<arg> to servers. Default is "Mozilla/5.0".

=item B<--proxy> I<arg>

Use proxy for HTTP connections, e.g. "http://foo:1234".
You can also define http_proxy environment setting to
achieve the same.

=item B<--no-proxy>

Disable use of HTTP proxy completely. Proxy will not
be used even if defined in http_proxy.

=item B<--connect-timeout> I<seconds>

Maximum seconds allowed connection to server take.
Default is 30.

=back

=head1 EXAMPLES

=over 4

=item quvi URL

Query URL.

=item quvi --support

Print supported website in the HTTP category.

=item quvi --support --category-rtmp

Same but in the RTMP category. See also L</NOTES - PROTOCOL CATEGORIES>.

=item quvi --support URL

Query (without an Internet connection) if libquvi can handle the URL.
Note that this will fail with most "shortened" URLs.

=item quvi YOUTUBE_URL

Query for YouTube media stream URL.

=item quvi YOUTUBE_URL -f best

Query for "best" (available format).

=item quvi YOUTUBE_URL -f best --xml

Same but print the results in XML.

=item quvi -f list youtube

Match the search pattern "youtube" to those domain names returned
by libquvi and print the results.

=item quvi -f list yout

Yields the same results.

=item echo "URL" | quvi

Read input from the pipeline. Similarly:

  % cat >> URLs
  URL1
  URL2
  (^D)
  % quvi < URLs
  Or:
  % quvi URLs

Separate each URL with a newline.

=back

=head1 FILES

=over 4

=item B<$HOME/.quvirc>

You can define most of the command line options in the config file.
For example:

 agent = some_agent/1.0     # --agent
 proxy = http://foo:1234    # --proxy
 no-verify                  # --no-verify
 verbose-libcurl            # --verbose-libcurl

You can use $QUVI_HOME instead of $HOME.

=back

=head1 ENVIRONMENT

=over 4

=item B<QUVI_HOME>

Path to the directory with the configuration file. If set, quvi
command uses this instead of $HOME.

=item B<QUVI_BASEDIR>

Path to the "base directory" with the libquvi LUA scripts. Overrides
the default search paths. e.g.:

  % ls /usr/share/quvi/lua
  README util website
  % env QUVI_BASEDIR=/usr/share/quvi quvi

=item B<QUVI_SHOW_SCANDIR>

If set, libquvi prints the LUA script search paths to the stderr.

=item B<QUVI_SHOW_SCRIPT>

If set, the LUA scripts found by libquvi are printed to the stderr.

  % env QUVI_SHOW_SCRIPT=1 quvi

=back

=head1 EXIT STATUS

quvi exits with 0 on success and E<gt>0 if an error occurred.

  QUVI_OK               = 0x00
  QUVI_MEM              = 0x01, Memory allocation failed
                            (or invalid quvi command line option)
  QUVI_BADHANDLE        = 0x02, Bad session handle
  QUVI_INVARG           = 0x03, Invalid function (or command line) arg
  QUVI_CURLINIT         = 0x04, libcurl initialization failed
  QUVI_LAST             = 0x05, Indicates end of list iteration
  QUVI_ABORTEDBYCALLBACK= 0x06, Aborted by callback function
  QUVI_LUAINIT          = 0x07, Lua initialization failure
  QUVI_NOLUAWEBSITE     = 0x08, Failed to find lua website scripts
  --
  QUVI_PCRE             = 0x40, libpcre error occurred, deprecated 0.2.9+
  QUVI_NOSUPPORT        = 0x41, libquvi does not support the host
  QUVI_CURL             = 0x42, libcurl error occurred
  QUVI_ICONV            = 0x43, libiconv error occurred
  QUVI_LUA              = 0x44, lua error occurred

=head1 DEBUGGING TIPS

=over 4

=item B<--verbose-libcurl>

Make libcurl verbose.

=item B<Debug symbols>

Compile quvi with C<-g>, see also C<gcc(1)>.

=item B<Other tools>

See also C<gdb(1)>, C<strace(1)> and C<valgrind(1)>.

=back

=head1 WWW

E<lt>http://quvi.sourceforge.net/E<gt>

E<lt>http://repo.or.cz/w/quvi.gitE<gt>

=head1 CONTRIBUTE

E<lt>http://repo.or.cz/w/quvi.git/tree/HEAD:/docE<gt>

=head1 BACKGROUND

quvi or "(qu)ery (vi)deo" for historical reasons. As of 0.2.15
a more suitable name would be qume or "(qu)ery (me)dia".

quvi was inspired by cclive. Embeddable LUA scripting was introduced
in 0.2.0.

=head1 LICENSE

quvi and libquvi are free software, licensed under the LGPLv2.1+.
The LUA scripts that quvi uses are considered as programs and using
the LUA scripts is B<linking>.

=head1 AUTHOR

Toni Gundogdu E<lt>legatvs at sign gmail comE<gt>

Thanks to all those who have contributed to the project by sending patches,
reporting bugs and writing feedback. You know who you are.

=cut
